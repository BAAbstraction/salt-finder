const ethers = require("ethers");

const { getContractAddress } = require('@ethersproject/address')

function create2Address(factoryAddress, saltHex, initCode) {
  const create2Addr = ethers.utils.getCreate2Address(factoryAddress, saltHex, ethers.utils.keccak256(initCode));
  return create2Addr;
}

function countMatchingChars(address) {
  let i = 0;

  if (address.length > 0) {
    while (i < address.length && address[i] === address[0]) {
      i++;
    }
  }

  return i;
}

const FactoryContractAddress = "0xF20aCA635CC4efcd5709cc1e78db4476a075dB1B";
const IntermediateFactoryBytecode = "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61062f8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100565760003560e01c80627743601461005b578063715018a61461008a5780638da5cb5b14610094578063f2fde38b146100a5578063f8072cd3146100b8575b600080fd5b61006e61006936600461038b565b6100cb565b6040516001600160a01b03909116815260200160405180910390f35b6100926100f5565b005b6000546001600160a01b031661006e565b6100926100b3366004610453565b610109565b61006e6100c6366004610475565b610187565b60006100d5610236565b60008251602084016000f09050803b6100ed57600080fd5b90505b919050565b6100fd610236565b6101076000610290565b565b610111610236565b6001600160a01b03811661017b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61018481610290565b50565b6000610191610236565b60006101b07341675c099f32341bf84bfc5382af534df5c7461a6102e0565b604080516020810182526000808252915163b63e800d60e01b81529293506001600160a01b0384169263b63e800d926101fb928a928a928a9290918290819081908190600401610536565b600060405180830381600087803b15801561021557600080fd5b505af1158015610229573d6000803e3d6000fd5b5092979650505050505050565b6000546001600160a01b031633146101075760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610172565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166100f05760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610172565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561039d57600080fd5b813567ffffffffffffffff808211156103b557600080fd5b818401915084601f8301126103c957600080fd5b8135818111156103db576103db610375565b604051601f8201601f19908116603f0116810190838211818310171561040357610403610375565b8160405282815287602084870101111561041c57600080fd5b826020860160208301376000928101602001929092525095945050505050565b80356001600160a01b03811681146100f057600080fd5b60006020828403121561046557600080fd5b61046e8261043c565b9392505050565b60008060006040848603121561048a57600080fd5b833567ffffffffffffffff808211156104a257600080fd5b818601915086601f8301126104b657600080fd5b8135818111156104c557600080fd5b8760208260051b85010111156104da57600080fd5b6020928301989097509590910135949350505050565b6000815180845260005b81811015610516576020818501810151868301820152016104fa565b506000602082860101526020601f19601f83011685010191505092915050565b6101008082528101899052600061012082018b825b8c81101561057a576001600160a01b036105648361043c565b168352602092830192919091019060010161054b565b5050896020840152610597604084018a6001600160a01b03169052565b82810360608401526105a981896104f0565b9150506105c160808301876001600160a01b03169052565b6001600160a01b03851660a08301528360c08301526105eb60e08301846001600160a01b03169052565b9a995050505050505050505056fea264697066735822122007ccdb4cd46675fe02346117cdbfdcdb4221cbd1f7eba9de63df5923d9375e6264736f6c63430008130033";

const initCode = ethers.utils.solidityPack(["bytes"], [IntermediateFactoryBytecode]);

const nonce = 1; // always
const limit = 6;

for (salt = 1; salt < 1_000_000_000; salt++){
  const saltHex = ethers.utils.hexZeroPad(salt, 32);

  if (salt % 1_000_000 == 0) {
    console.log('Salt', saltHex);
  }

  const futureIntemediateFactoryAddress = create2Address(FactoryContractAddress, saltHex, initCode);

  const futureAccountAbstractionAddress = getContractAddress({
    from: futureIntemediateFactoryAddress,
    nonce: nonce,
  });
  const countChars = countMatchingChars(futureAccountAbstractionAddress.slice(2).toLowerCase());

  if (countChars >= limit) {
    console.log({ salt, saltHex, futureAccountAbstractionAddress });
  }
}
