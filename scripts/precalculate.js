const ethers = require("ethers");

const { getContractAddress } = require('@ethersproject/address')

function create2Address(factoryAddress, saltHex, initCode) {
  const create2Addr = ethers.utils.getCreate2Address(factoryAddress, saltHex, ethers.utils.keccak256(initCode));
  return create2Addr;
}

function countMatchingChars(address) {
  let i = 0;

  if (address.length > 0) {
    while (i < address.length && address[i] === address[0]) {
      i++;
    }
  }

  return i;
}

const FactoryContractAddress = "0x829e2C816A2c9f6bAC5b0D9195598Eef620c5F8e";
const IntermediateFactoryBytecode = "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107a38061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100565760003560e01c80627743601461005b578063715018a61461008a5780638da5cb5b14610094578063f2fde38b146100a5578063f8072cd3146100b8575b600080fd5b61006e61006936600461038d565b6100cb565b6040516001600160a01b03909116815260200160405180910390f35b6100926100f5565b005b6000546001600160a01b031661006e565b6100926100b3366004610455565b610109565b61006e6100c6366004610477565b610187565b60006100d56102c0565b60008251602084016000f09050803b6100ed57600080fd5b90505b919050565b6100fd6102c0565b610107600061031a565b565b6101116102c0565b6001600160a01b03811661017b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6101848161031a565b50565b60006101916102c0565b60007341675c099f32341bf84bfc5382af534df5c7461a90506000816040516101b99061036a565b6001600160a01b039091168152602001604051809103906000f0801580156101e5573d6000803e3d6000fd5b50604080516020810182526000808252915163b63e800d60e01b81529293506001600160a01b0384169263b63e800d92610245928b928b928b92909173f48f2b2d2a534e402487b3ee7c18c33aec0fe5e490839081908190600401610538565b600060405180830381600087803b15801561025f57600080fd5b505af1158015610273573d6000803e3d6000fd5b50506040516001600160a01b038581168252841692507f4f51faf6c4561ff95f067657e43439f0f856d97c04d9ec9070a6199ad418e235915060200160405180910390a295945050505050565b6000546001600160a01b031633146101075760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610172565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610172806105fc83390190565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561039f57600080fd5b813567ffffffffffffffff808211156103b757600080fd5b818401915084601f8301126103cb57600080fd5b8135818111156103dd576103dd610377565b604051601f8201601f19908116603f0116810190838211818310171561040557610405610377565b8160405282815287602084870101111561041e57600080fd5b826020860160208301376000928101602001929092525095945050505050565b80356001600160a01b03811681146100f057600080fd5b60006020828403121561046757600080fd5b6104708261043e565b9392505050565b60008060006040848603121561048c57600080fd5b833567ffffffffffffffff808211156104a457600080fd5b818601915086601f8301126104b857600080fd5b8135818111156104c757600080fd5b8760208260051b85010111156104dc57600080fd5b6020928301989097509590910135949350505050565b6000815180845260005b81811015610518576020818501810151868301820152016104fc565b506000602082860101526020601f19601f83011685010191505092915050565b6101008082528101899052600061012082018b825b8c81101561057c576001600160a01b036105668361043e565b168352602092830192919091019060010161054d565b5050896020840152610599604084018a6001600160a01b03169052565b82810360608401526105ab81896104f2565b9150506105c360808301876001600160a01b03169052565b6001600160a01b03851660a08301528360c08301526105ed60e08301846001600160a01b03169052565b9a995050505050505050505056fe608060405234801561001057600080fd5b5060405161017238038061017283398101604081905261002f916100b9565b6001600160a01b0381166100945760405162461bcd60e51b815260206004820152602260248201527f496e76616c69642073696e676c65746f6e20616464726573732070726f766964604482015261195960f21b606482015260840160405180910390fd5b600080546001600160a01b0319166001600160a01b03929092169190911790556100e9565b6000602082840312156100cb57600080fd5b81516001600160a01b03811681146100e257600080fd5b9392505050565b607b806100f76000396000f3fe6080604052600080546001600160a01b0316632cf35bc960e11b823501602757808252602082f35b3682833781823684845af490503d82833e806040573d82fd5b503d81f3fea264697066735822122053861a586cd9905a8e79a0b859f8bf6e95e7036f15c32400ef254f7dc5ff8ece64736f6c63430008130033a26469706673582212208611039081a3afb4d8f256bcecfa951c65e659ddde369ddeeb1e1a8cbe315f6b64736f6c63430008130033";

const initCode = ethers.utils.solidityPack(["bytes"], [IntermediateFactoryBytecode]);

const nonce = 1; // always
const limit = parseInt(process.env.LIMIT ?? 6);

const scanFrom = Math.floor(Math.random() * 1_000_000_000_000);
for (salt = scanFrom; salt < scanFrom + 100_000_000_000; salt++){
  const saltHex = ethers.utils.hexZeroPad(salt, 32);

  if (salt % 1_000_000 == 0) {
    console.log('Salt', saltHex);
  }

  const futureIntemediateFactoryAddress = create2Address(FactoryContractAddress, saltHex, initCode);

  const futureAccountAbstractionAddress = getContractAddress({
    from: futureIntemediateFactoryAddress,
    nonce: nonce,
  });
  const countChars = countMatchingChars(futureAccountAbstractionAddress.slice(2).toLowerCase());

  if (countChars >= limit) {
    console.log({ salt, saltHex, futureAccountAbstractionAddress });
  }
}
