const ethers = require("ethers");

const { getContractAddress } = require('@ethersproject/address')

function create2Address(factoryAddress, saltHex, initCode) {
  const create2Addr = ethers.utils.getCreate2Address(factoryAddress, saltHex, ethers.utils.keccak256(initCode));
  return create2Addr;
}

function countMatchingChars(address) {
  let i = 0;

  if (address.length > 0) {
    while (i < address.length && address[i] === address[0]) {
      i++;
    }
  }

  return i;
}

const FactoryContractAddress = "0x0b58f6C7cA2743c5F75e2BEfB19f6951aDBb223f";
const IntermediateFactoryBytecode = "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61033e8061007e6000396000f3fe608060405234801561001057600080fd5b506004361061004b5760003560e01c806277436014610050578063715018a61461007f5780638da5cb5b14610089578063f2fde38b1461009a575b600080fd5b61006361005e366004610227565b6100ad565b6040516001600160a01b03909116815260200160405180910390f35b6100876100d5565b005b6000546001600160a01b0316610063565b6100876100a83660046102d8565b6100e9565b60006100b7610167565b60008251602084016000f09050803b6100cf57600080fd5b92915050565b6100dd610167565b6100e760006101c1565b565b6100f1610167565b6001600160a01b03811661015b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610164816101c1565b50565b6000546001600160a01b031633146100e75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610152565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561023957600080fd5b813567ffffffffffffffff8082111561025157600080fd5b818401915084601f83011261026557600080fd5b81358181111561027757610277610211565b604051601f8201601f19908116603f0116810190838211818310171561029f5761029f610211565b816040528281528760208487010111156102b857600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000602082840312156102ea57600080fd5b81356001600160a01b038116811461030157600080fd5b939250505056fea2646970667358221220f50cbd74f5ef22041de35b9f721d50e1b6c1f77ab52d76238c0f37a8049ff7cd64736f6c63430008130033";

const initCode = ethers.utils.solidityPack(["bytes"], [IntermediateFactoryBytecode]);

const nonce = 1; // always
const limit = 6;

for (salt = 1; salt < 10_000_000; salt++){
  const saltHex = ethers.utils.hexZeroPad(salt, 32);

  if (salt % 1_000_000 == 0) {
    console.log('Salt', saltHex);
  }

  const futureIntemediateFactoryAddress = create2Address(FactoryContractAddress, saltHex, initCode);

  const futureAccountAbstractionAddress = getContractAddress({
    from: futureIntemediateFactoryAddress,
    nonce: nonce,
  });
  const countChars = countMatchingChars(futureAccountAbstractionAddress.slice(2).toLowerCase());

  if (countChars >= limit) {
    console.log({ salt, saltHex, futureAccountAbstractionAddress });
  }
}
